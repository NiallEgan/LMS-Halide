#include <string.h>
#include "pipeline.h"
void pipeline(UCHAR * x0, UCHAR * x1, int32_t x2, int32_t x3) {
int32_t x5 = x2 - 1; //  w - 1
int32_t x6 = x5 - 1; // w - 2
int32_t x4 = x3 - 1; // h - 1
int32_t x7 = x4 - 1; // h - 2
int32_t x8 = x6 * x7; // (w-2)(h-2)
int32_t x9 = x8 * 3; // 3 ...
UCHAR x10[x9]; //
int32_t x13 = x2 * 3; // 3w
for(int x12=1; x12 < x4; x12++) { // from 1 to h - 1
UCHAR x14[x13]; // 3 * w
int32_t x17 = x12 + 1; // y + 1
int32_t x131 = x12 - 1; // y - 1
int32_t x132 = x6 * x131; // (w - 2) (y - 1)
for(int x16=1; x16 < x5; x16++) { // x from  1 to w - 1
int32_t x20 = x16 + -1; // x - 1
int32_t x21 = x16 + 1; // x + 1
int32_t x22 = x21 + 1; // x + 2
for(int x19=x12; x19 < x17; x19++) { // y_f from y to y
int32_t x73 = x19 - x12; // y_f - y (always 0)
int32_t x74 = x2 * x73; // w * (y_f - y)
int32_t x28 = x19 - 1; // y_f - 1
int32_t x29 = x2 * x28; // w * (y_f - 1)
int32_t x40 = x2 * x19; // w * y_f
int32_t x54 = x19 + 1; // y_f + 1
int32_t x55 = x2 * x54; // w * (y_f + 1)
for(int x24=x20; x24 < x22; x24++) { // // x_f from x - 1 to x + 1
bool x25 = x24 < 2;  
bool x26 = x24 == x21; // x_f < 2 || x_f == x + 1
bool x27 = x25 || x26;
if (x27) {
int32_t x72 = x24 - x20;
int32_t x75 = x72 + x74;
int32_t x76 = 3 * x75;
int32_t x77 = x76 + 2;
int32_t x30 = x24 + x29;
int32_t x31 = 3 * x30;
int32_t x32 = x31 + 2;
UCHAR x33 = x0[x32];
int32_t x34 = (int) x33;
int32_t x41 = x24 + x40;
int32_t x42 = 3 * x41;
int32_t x43 = x42 + 2;
UCHAR x44 = x0[x43];
int32_t x45 = (int) x44;
int32_t x51 = x34 + x45;
int32_t x56 = x24 + x55;
int32_t x57 = 3 * x56;
int32_t x58 = x57 + 2;
UCHAR x59 = x0[x58];
int32_t x60 = (int) x59;
int32_t x66 = x51 + x60;
int32_t x69 = x66 / 3;
UCHAR x78 = x69;
x14[x77] = x78;
int32_t x80 = x76 + 1;
int32_t x35 = x31 + 1;
UCHAR x36 = x0[x35];
int32_t x37 = (int) x36;
int32_t x46 = x42 + 1;
UCHAR x47 = x0[x46];
int32_t x48 = (int) x47;
int32_t x52 = x37 + x48;
int32_t x61 = x57 + 1;
UCHAR x62 = x0[x61];
int32_t x63 = (int) x62;
int32_t x67 = x52 + x63;
int32_t x70 = x67 / 3;
UCHAR x81 = x70;
x14[x80] = x81;
UCHAR x38 = x0[x31];
int32_t x39 = (int) x38;
UCHAR x49 = x0[x42];
int32_t x50 = (int) x49;
int32_t x53 = x39 + x50;
UCHAR x64 = x0[x57];
int32_t x65 = (int) x64;
int32_t x68 = x53 + x65;
int32_t x71 = x68 / 3;
UCHAR x83 = x71;
x14[x76] = x83;
} else {
}

}

}
int32_t x91 = x16 - 1;
int32_t x92 = x91 - x20;
int32_t x93 = 3 * x92;
int32_t x94 = x93 + 2;
UCHAR x95 = x14[x94];
int32_t x97 = x93 + 1;
UCHAR x98 = x14[x97];
UCHAR x100 = x14[x93];
int32_t x102 = x16 - x20;
int32_t x103 = 3 * x102;
int32_t x104 = x103 + 2;
UCHAR x105 = x14[x104];
int32_t x107 = x103 + 1;
UCHAR x108 = x14[x107];
UCHAR x110 = x14[x103];
int32_t x115 = x21 - x20;
int32_t x116 = 3 * x115;
int32_t x117 = x116 + 2;
UCHAR x118 = x14[x117];
int32_t x120 = x116 + 1;
UCHAR x121 = x14[x120];
UCHAR x123 = x14[x116];
int32_t x133 = x91 + x132;
int32_t x134 = 3 * x133;
int32_t x135 = x134 + 2;
int32_t x96 = (int) x95;
int32_t x106 = (int) x105;
int32_t x112 = x96 + x106;
int32_t x119 = (int) x118;
int32_t x125 = x112 + x119;
int32_t x128 = x125 / 3;
UCHAR x136 = x128;
x10[x135] = x136;
int32_t x138 = x134 + 1;
int32_t x99 = (int) x98;
int32_t x109 = (int) x108;
int32_t x113 = x99 + x109;
int32_t x122 = (int) x121;
int32_t x126 = x113 + x122;
int32_t x129 = x126 / 3;
UCHAR x139 = x129;
x10[x138] = x139;
int32_t x101 = (int) x100;
int32_t x111 = (int) x110;
int32_t x114 = x101 + x111;
int32_t x124 = (int) x123;
int32_t x127 = x114 + x124;
int32_t x130 = x127 / 3;
UCHAR x141 = x130;
x10[x134] = x141;

}

}
memcpy(x1, x10, x9);
}
#define WIDTH_OUT_DIFF (2)
#define HEIGHT_OUT_DIFF (2)
